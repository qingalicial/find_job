把一个数组最开始的若干个元素搬到数组的末尾，我们称之为数组的旋转。 输入一个非递减排序的数组的一个旋转，输出旋转数组的最小元素。
例如数组{3,4,5,1,2}为{1,2,3,4,5}的一个旋转，该数组的最小值为1。 NOTE：给出的所有元素都大于0，若数组大小为0，请返回0。

第一段话解释了旋转数组的定义，且原数组应该是递增排序的（可能有相等元素，故为非递减）

旋转之后的数组实际上可以划分成两个有序的子数组：前面子数组的大小都大于后面子数组中的元素

注意到实际上最小的元素就是两个子数组的分界线。本题目给出的数组一定程度上是排序的，因此我们试着用二分查找法寻找这个最小的元素。



这题不很简答吗，非递减数组旋转之后最小值，也就是寻找分界点，分界点前后都是非递减数组，分界点后面的非递减数组比分界点前面的数组都要小，因此对旋转数组按顺序查找，当出现后一个数比前一个小时，这个数就是最小值，
若没有出现后一个数比前一个数小的情况，这说明这个数组所有的数都相等，返回数组第一个数即可。注意考虑数组为空的情况，返回0

要注意等于号放哪边。
class Solution:
    def minNumberInRotateArray(self, rotateArray):
        # write code here
        if not rotateArray:
            return 0
        while rotateArray:
            l = len(rotateArray)
            if l == 1:
                return rotateArray[0]
            if rotateArray[(l-1)/2] > rotateArray[l-1]:
                rotateArray = rotateArray[(l-1)/2+1:]
            elif rotateArray[(l-1)/2] <= rotateArray[l-1]:
                rotateArray = rotateArray[:(l-1)/2+1]
